// Code generated by goa v3.16.1, DO NOT EDIT.
//
// Weather Forecaster Service API HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/pulse/examples/weather/services/forecaster/design -o
// services/forecaster

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	forecasterc "goa.design/pulse/examples/weather/services/forecaster/gen/http/forecaster/client"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `forecaster forecast
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` forecaster forecast --state "CA" --city "Santa Barbara"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		forecasterFlags = flag.NewFlagSet("forecaster", flag.ContinueOnError)

		forecasterForecastFlags     = flag.NewFlagSet("forecast", flag.ExitOnError)
		forecasterForecastStateFlag = forecasterForecastFlags.String("state", "REQUIRED", "State")
		forecasterForecastCityFlag  = forecasterForecastFlags.String("city", "REQUIRED", "City")
	)
	forecasterFlags.Usage = forecasterUsage
	forecasterForecastFlags.Usage = forecasterForecastUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "forecaster":
			svcf = forecasterFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "forecaster":
			switch epn {
			case "forecast":
				epf = forecasterForecastFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "forecaster":
			c := forecasterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "forecast":
				endpoint = c.Forecast()
				data, err = forecasterc.BuildForecastPayload(*forecasterForecastStateFlag, *forecasterForecastCityFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// forecasterUsage displays the usage of the forecaster command and its
// subcommands.
func forecasterUsage() {
	fmt.Fprintf(os.Stderr, `Service that provides weather forecasts
Usage:
    %[1]s [globalflags] forecaster COMMAND [flags]

COMMAND:
    forecast: Retrieve weather forecast for a given US city

Additional help:
    %[1]s forecaster COMMAND --help
`, os.Args[0])
}
func forecasterForecastUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] forecaster forecast -state STRING -city STRING

Retrieve weather forecast for a given US city
    -state STRING: State
    -city STRING: City

Example:
    %[1]s forecaster forecast --state "CA" --city "Santa Barbara"
`, os.Args[0])
}
