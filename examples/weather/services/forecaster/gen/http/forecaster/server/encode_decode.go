// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Forecaster HTTP server encoders and decoders
//
// Command:
// $ goa gen goa.design/ponos/examples/weather/services/forecaster/design -o
// services/forecaster

package server

import (
	"context"
	"errors"
	"net/http"
	"unicode/utf8"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	forecaster "goa.design/ponos/examples/weather/services/forecaster/gen/forecaster"
)

// EncodeForecastResponse returns an encoder for responses returned by the
// Forecaster forecast endpoint.
func EncodeForecastResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*forecaster.Forecast2)
		enc := encoder(ctx, w)
		body := NewForecastResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeForecastRequest returns a decoder for requests sent to the Forecaster
// forecast endpoint.
func DecodeForecastRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			state string
			city  string
			err   error

			params = mux.Vars(r)
		)
		state = params["state"]
		if utf8.RuneCountInString(state) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 2, true))
		}
		if utf8.RuneCountInString(state) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 2, false))
		}
		city = params["city"]
		if err != nil {
			return nil, err
		}
		payload := NewForecastPayload(state, city)

		return payload, nil
	}
}

// EncodeForecastError returns an encoder for errors returned by the forecast
// Forecaster endpoint.
func EncodeForecastError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "timeout":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewForecastTimeoutResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusGatewayTimeout)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalForecasterLocationToLocationResponseBody builds a value of type
// *LocationResponseBody from a value of type *forecaster.Location.
func marshalForecasterLocationToLocationResponseBody(v *forecaster.Location) *LocationResponseBody {
	res := &LocationResponseBody{
		Lat:   v.Lat,
		Long:  v.Long,
		City:  v.City,
		State: v.State,
	}

	return res
}

// marshalForecasterPeriodToPeriodResponseBody builds a value of type
// *PeriodResponseBody from a value of type *forecaster.Period.
func marshalForecasterPeriodToPeriodResponseBody(v *forecaster.Period) *PeriodResponseBody {
	res := &PeriodResponseBody{
		Name:            v.Name,
		StartTime:       v.StartTime,
		EndTime:         v.EndTime,
		Temperature:     v.Temperature,
		TemperatureUnit: v.TemperatureUnit,
		Summary:         v.Summary,
	}

	return res
}
