// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Forecaster HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/ponos/examples/weather/services/forecaster/design -o
// services/forecaster

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	forecaster "goa.design/ponos/examples/weather/services/forecaster/gen/forecaster"
)

// BuildForecastRequest instantiates a HTTP request object with method and path
// set to call the "Forecaster" service "forecast" endpoint
func (c *Client) BuildForecastRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		state string
		city  string
	)
	{
		p, ok := v.(*forecaster.ForecastPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Forecaster", "forecast", "*forecaster.ForecastPayload", v)
		}
		state = p.State
		city = p.City
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ForecastForecasterPath(state, city)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Forecaster", "forecast", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeForecastResponse returns a decoder for responses returned by the
// Forecaster forecast endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeForecastResponse may return the following errors:
//   - "timeout" (type *goa.ServiceError): http.StatusGatewayTimeout
//   - error: internal error
func DecodeForecastResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ForecastResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Forecaster", "forecast", err)
			}
			err = ValidateForecastResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Forecaster", "forecast", err)
			}
			res := NewForecast2OK(&body)
			return res, nil
		case http.StatusGatewayTimeout:
			var (
				body ForecastTimeoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Forecaster", "forecast", err)
			}
			err = ValidateForecastTimeoutResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Forecaster", "forecast", err)
			}
			return nil, NewForecastTimeout(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Forecaster", "forecast", resp.StatusCode, string(body))
		}
	}
}

// unmarshalLocationResponseBodyToForecasterLocation builds a value of type
// *forecaster.Location from a value of type *LocationResponseBody.
func unmarshalLocationResponseBodyToForecasterLocation(v *LocationResponseBody) *forecaster.Location {
	res := &forecaster.Location{
		Lat:   *v.Lat,
		Long:  *v.Long,
		City:  *v.City,
		State: *v.State,
	}

	return res
}

// unmarshalPeriodResponseBodyToForecasterPeriod builds a value of type
// *forecaster.Period from a value of type *PeriodResponseBody.
func unmarshalPeriodResponseBodyToForecasterPeriod(v *PeriodResponseBody) *forecaster.Period {
	res := &forecaster.Period{
		Name:            *v.Name,
		StartTime:       *v.StartTime,
		EndTime:         *v.EndTime,
		Temperature:     *v.Temperature,
		TemperatureUnit: *v.TemperatureUnit,
		Summary:         *v.Summary,
	}

	return res
}
