// Code generated by Clue Mock Generator v0.17.1, DO NOT EDIT.
//
// Command:
// $ cmg gen goa.design/ponos/examples/weather/services/forecaster/clients/poller

package mockpoller

import (
	"context"
	"testing"

	"goa.design/clue/mock"

	"goa.design/ponos/examples/weather/services/forecaster/clients/poller"
	poller1 "goa.design/ponos/examples/weather/services/poller/gen/poller"
)

type (
	Client struct {
		m *mock.Mock
		t *testing.T
	}

	ClientAddLocationFunc func(ctx context.Context, city, state string) error
	ClientSubscribeFunc   func(ctx context.Context, city, state string) (<-chan *poller1.Forecast, error)
)

func NewClient(t *testing.T) *Client {
	var (
		m               = &Client{mock.New(), t}
		_ poller.Client = m
	)
	return m
}

func (m *Client) AddAddLocation(f ClientAddLocationFunc) {
	m.m.Add("AddLocation", f)
}

func (m *Client) SetAddLocation(f ClientAddLocationFunc) {
	m.m.Set("AddLocation", f)
}

func (m *Client) AddLocation(ctx context.Context, city, state string) error {
	if f := m.m.Next("AddLocation"); f != nil {
		return f.(ClientAddLocationFunc)(ctx, city, state)
	}
	m.t.Helper()
	m.t.Error("unexpected AddLocation call")
	return nil
}

func (m *Client) AddSubscribe(f ClientSubscribeFunc) {
	m.m.Add("Subscribe", f)
}

func (m *Client) SetSubscribe(f ClientSubscribeFunc) {
	m.m.Set("Subscribe", f)
}

func (m *Client) Subscribe(ctx context.Context, city, state string) (<-chan *poller1.Forecast, error) {
	if f := m.m.Next("Subscribe"); f != nil {
		return f.(ClientSubscribeFunc)(ctx, city, state)
	}
	m.t.Helper()
	m.t.Error("unexpected Subscribe call")
	return nil, nil
}

func (m *Client) HasMore() bool {
	return m.m.HasMore()
}
