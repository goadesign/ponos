// Code generated by goa v3.16.1, DO NOT EDIT.
//
// Poller service
//
// Command:
// $ goa gen goa.design/pulse/examples/weather/services/poller/design -o
// services/poller

package poller

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service that polls weather forecasts and notifies subscribers.
type Service interface {
	// Adds a location to the polling list.
	AddLocation(context.Context, *CityAndState) (err error)
	// Subscribes to weather forecast notifications for a location.
	Subscribe(context.Context, *CityAndState, SubscribeServerStream) (err error)
	// Adds a worker to the poller worker pool.
	AddWorker(context.Context) (res *Worker, err error)
	// Removes a worker from the poller worker pool.
	RemoveWorker(context.Context) (err error)
	// Provides poller status and statistics.
	Status(context.Context) (res *PollerStatus, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "Forecast Poller Service API"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Poller"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"add_location", "subscribe", "add_worker", "remove_worker", "status"}

// SubscribeServerStream is the interface a "subscribe" endpoint server stream
// must satisfy.
type SubscribeServerStream interface {
	// Send streams instances of "Forecast".
	Send(*Forecast) error
	// Close closes the stream.
	Close() error
}

// SubscribeClientStream is the interface a "subscribe" endpoint client stream
// must satisfy.
type SubscribeClientStream interface {
	// Recv reads instances of "Forecast" from the stream.
	Recv() (*Forecast, error)
}

// CityAndState is the payload type of the Poller service add_location method.
type CityAndState struct {
	// State
	State string
	// City
	City string
}

// Forecast is the result type of the Poller service subscribe method.
type Forecast struct {
	// Forecast location
	Location *Location
	// Weather forecast periods
	Periods []*Period
}

// Location forecast poll job
type Job struct {
	// Job key
	Key string
	// Job payload
	Payload []byte
	// Creation timestamp
	CreatedAt string
}

// Geographical location
type Location struct {
	// Latitude
	Lat float64
	// Longitude
	Long float64
	// City
	City string
	// State
	State string
}

// Weather forecast period
type Period struct {
	// Period name
	Name string
	// Start time
	StartTime string
	// End time
	EndTime string
	// Temperature
	Temperature int
	// Temperature unit
	TemperatureUnit string
	// Summary
	Summary string
}

// PollerStatus is the result type of the Poller service status method.
type PollerStatus struct {
	// Poller workers
	Workers []*Worker
	// Location poll jobs
	Jobs []*Job
}

// Worker is the result type of the Poller service add_worker method.
type Worker struct {
	// Worker ID
	ID string
	// Worker poll jobs
	Jobs []*Job
	// Creation timestamp
	CreatedAt string
}

// MakeLocationExists builds a goa.ServiceError from an error.
func MakeLocationExists(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "location_exists", false, false, false)
}

// MakeTooFew builds a goa.ServiceError from an error.
func MakeTooFew(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "too_few", false, false, false)
}
