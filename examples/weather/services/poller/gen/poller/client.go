// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Poller client
//
// Command:
// $ goa gen goa.design/ponos/examples/weather/services/poller/design -o
// services/poller

package poller

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Poller" service client.
type Client struct {
	AddLocationEndpoint  goa.Endpoint
	SubscribeEndpoint    goa.Endpoint
	AddWorkerEndpoint    goa.Endpoint
	RemoveWorkerEndpoint goa.Endpoint
	StatusEndpoint       goa.Endpoint
}

// NewClient initializes a "Poller" service client given the endpoints.
func NewClient(addLocation, subscribe, addWorker, removeWorker, status goa.Endpoint) *Client {
	return &Client{
		AddLocationEndpoint:  addLocation,
		SubscribeEndpoint:    subscribe,
		AddWorkerEndpoint:    addWorker,
		RemoveWorkerEndpoint: removeWorker,
		StatusEndpoint:       status,
	}
}

// AddLocation calls the "add_location" endpoint of the "Poller" service.
// AddLocation may return the following errors:
//   - "location_exists" (type *goa.ServiceError): Location already exists
//   - error: internal error
func (c *Client) AddLocation(ctx context.Context, p *CityAndState) (err error) {
	_, err = c.AddLocationEndpoint(ctx, p)
	return
}

// Subscribe calls the "subscribe" endpoint of the "Poller" service.
func (c *Client) Subscribe(ctx context.Context, p *CityAndState) (res SubscribeClientStream, err error) {
	var ires any
	ires, err = c.SubscribeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SubscribeClientStream), nil
}

// AddWorker calls the "add_worker" endpoint of the "Poller" service.
func (c *Client) AddWorker(ctx context.Context) (res *Worker, err error) {
	var ires any
	ires, err = c.AddWorkerEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Worker), nil
}

// RemoveWorker calls the "remove_worker" endpoint of the "Poller" service.
// RemoveWorker may return the following errors:
//   - "too_few" (type *goa.ServiceError): Only one worker left
//   - error: internal error
func (c *Client) RemoveWorker(ctx context.Context) (err error) {
	_, err = c.RemoveWorkerEndpoint(ctx, nil)
	return
}

// Status calls the "status" endpoint of the "Poller" service.
func (c *Client) Status(ctx context.Context) (res *PollerStatus, err error) {
	var ires any
	ires, err = c.StatusEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*PollerStatus), nil
}
