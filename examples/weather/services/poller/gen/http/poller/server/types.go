// Code generated by goa v3.16.1, DO NOT EDIT.
//
// Poller HTTP server types
//
// Command:
// $ goa gen goa.design/pulse/examples/weather/services/poller/design -o
// services/poller

package server

import (
	goa "goa.design/goa/v3/pkg"
	poller "goa.design/pulse/examples/weather/services/poller/gen/poller"
)

// SubscribeResponseBody is the type of the "Poller" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody struct {
	// Forecast location
	Location *LocationResponseBody `form:"location" json:"location" xml:"location"`
	// Weather forecast periods
	Periods []*PeriodResponseBody `form:"periods" json:"periods" xml:"periods"`
}

// AddWorkerResponseBody is the type of the "Poller" service "add_worker"
// endpoint HTTP response body.
type AddWorkerResponseBody struct {
	// Worker ID
	ID string `form:"id" json:"id" xml:"id"`
	// Worker poll jobs
	Jobs []*JobResponseBody `form:"jobs" json:"jobs" xml:"jobs"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// StatusResponseBody is the type of the "Poller" service "status" endpoint
// HTTP response body.
type StatusResponseBody struct {
	// Poller workers
	Workers []*WorkerResponseBody `form:"workers" json:"workers" xml:"workers"`
	// Location poll jobs
	Jobs []*JobResponseBody `form:"jobs" json:"jobs" xml:"jobs"`
}

// AddLocationLocationExistsResponseBody is the type of the "Poller" service
// "add_location" endpoint HTTP response body for the "location_exists" error.
type AddLocationLocationExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RemoveWorkerTooFewResponseBody is the type of the "Poller" service
// "remove_worker" endpoint HTTP response body for the "too_few" error.
type RemoveWorkerTooFewResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LocationResponseBody is used to define fields on response body types.
type LocationResponseBody struct {
	// Latitude
	Lat float64 `form:"lat" json:"lat" xml:"lat"`
	// Longitude
	Long float64 `form:"long" json:"long" xml:"long"`
	// City
	City string `form:"city" json:"city" xml:"city"`
	// State
	State string `form:"state" json:"state" xml:"state"`
}

// PeriodResponseBody is used to define fields on response body types.
type PeriodResponseBody struct {
	// Period name
	Name string `form:"name" json:"name" xml:"name"`
	// Start time
	StartTime string `form:"startTime" json:"startTime" xml:"startTime"`
	// End time
	EndTime string `form:"endTime" json:"endTime" xml:"endTime"`
	// Temperature
	Temperature int `form:"temperature" json:"temperature" xml:"temperature"`
	// Temperature unit
	TemperatureUnit string `form:"temperatureUnit" json:"temperatureUnit" xml:"temperatureUnit"`
	// Summary
	Summary string `form:"summary" json:"summary" xml:"summary"`
}

// JobResponseBody is used to define fields on response body types.
type JobResponseBody struct {
	// Job key
	Key string `form:"key" json:"key" xml:"key"`
	// Job payload
	Payload []byte `form:"payload" json:"payload" xml:"payload"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// WorkerResponseBody is used to define fields on response body types.
type WorkerResponseBody struct {
	// Worker ID
	ID string `form:"id" json:"id" xml:"id"`
	// Worker poll jobs
	Jobs []*JobResponseBody `form:"jobs" json:"jobs" xml:"jobs"`
	// Creation timestamp
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// NewSubscribeResponseBody builds the HTTP response body from the result of
// the "subscribe" endpoint of the "Poller" service.
func NewSubscribeResponseBody(res *poller.Forecast) *SubscribeResponseBody {
	body := &SubscribeResponseBody{}
	if res.Location != nil {
		body.Location = marshalPollerLocationToLocationResponseBody(res.Location)
	}
	if res.Periods != nil {
		body.Periods = make([]*PeriodResponseBody, len(res.Periods))
		for i, val := range res.Periods {
			body.Periods[i] = marshalPollerPeriodToPeriodResponseBody(val)
		}
	} else {
		body.Periods = []*PeriodResponseBody{}
	}
	return body
}

// NewAddWorkerResponseBody builds the HTTP response body from the result of
// the "add_worker" endpoint of the "Poller" service.
func NewAddWorkerResponseBody(res *poller.Worker) *AddWorkerResponseBody {
	body := &AddWorkerResponseBody{
		ID:        res.ID,
		CreatedAt: res.CreatedAt,
	}
	if res.Jobs != nil {
		body.Jobs = make([]*JobResponseBody, len(res.Jobs))
		for i, val := range res.Jobs {
			body.Jobs[i] = marshalPollerJobToJobResponseBody(val)
		}
	} else {
		body.Jobs = []*JobResponseBody{}
	}
	return body
}

// NewStatusResponseBody builds the HTTP response body from the result of the
// "status" endpoint of the "Poller" service.
func NewStatusResponseBody(res *poller.PollerStatus) *StatusResponseBody {
	body := &StatusResponseBody{}
	if res.Workers != nil {
		body.Workers = make([]*WorkerResponseBody, len(res.Workers))
		for i, val := range res.Workers {
			body.Workers[i] = marshalPollerWorkerToWorkerResponseBody(val)
		}
	} else {
		body.Workers = []*WorkerResponseBody{}
	}
	if res.Jobs != nil {
		body.Jobs = make([]*JobResponseBody, len(res.Jobs))
		for i, val := range res.Jobs {
			body.Jobs[i] = marshalPollerJobToJobResponseBody(val)
		}
	} else {
		body.Jobs = []*JobResponseBody{}
	}
	return body
}

// NewAddLocationLocationExistsResponseBody builds the HTTP response body from
// the result of the "add_location" endpoint of the "Poller" service.
func NewAddLocationLocationExistsResponseBody(res *goa.ServiceError) *AddLocationLocationExistsResponseBody {
	body := &AddLocationLocationExistsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRemoveWorkerTooFewResponseBody builds the HTTP response body from the
// result of the "remove_worker" endpoint of the "Poller" service.
func NewRemoveWorkerTooFewResponseBody(res *goa.ServiceError) *RemoveWorkerTooFewResponseBody {
	body := &RemoveWorkerTooFewResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddLocationCityAndState builds a Poller service add_location endpoint
// payload.
func NewAddLocationCityAndState(city string, state string) *poller.CityAndState {
	v := &poller.CityAndState{}
	v.City = city
	v.State = state

	return v
}

// NewSubscribeCityAndState builds a Poller service subscribe endpoint payload.
func NewSubscribeCityAndState(city string, state string) *poller.CityAndState {
	v := &poller.CityAndState{}
	v.City = city
	v.State = state

	return v
}
