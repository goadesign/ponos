// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Poller HTTP client types
//
// Command:
// $ goa gen goa.design/pulse/examples/weather/services/poller/design -o
// services/poller

package client

import (
	goa "goa.design/goa/v3/pkg"
	poller "goa.design/pulse/examples/weather/services/poller/gen/poller"
)

// SubscribeResponseBody is the type of the "Poller" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody struct {
	// Forecast location
	Location *LocationResponseBody `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Weather forecast periods
	Periods []*PeriodResponseBody `form:"periods,omitempty" json:"periods,omitempty" xml:"periods,omitempty"`
}

// AddWorkerResponseBody is the type of the "Poller" service "add_worker"
// endpoint HTTP response body.
type AddWorkerResponseBody struct {
	// Worker ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Worker poll jobs
	Jobs []*JobResponseBody `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// StatusResponseBody is the type of the "Poller" service "status" endpoint
// HTTP response body.
type StatusResponseBody struct {
	// Poller workers
	Workers []*WorkerResponseBody `form:"workers,omitempty" json:"workers,omitempty" xml:"workers,omitempty"`
	// Location poll jobs
	Jobs []*JobResponseBody `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
}

// AddLocationLocationExistsResponseBody is the type of the "Poller" service
// "add_location" endpoint HTTP response body for the "location_exists" error.
type AddLocationLocationExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RemoveWorkerTooFewResponseBody is the type of the "Poller" service
// "remove_worker" endpoint HTTP response body for the "too_few" error.
type RemoveWorkerTooFewResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LocationResponseBody is used to define fields on response body types.
type LocationResponseBody struct {
	// Latitude
	Lat *float64 `form:"lat,omitempty" json:"lat,omitempty" xml:"lat,omitempty"`
	// Longitude
	Long *float64 `form:"long,omitempty" json:"long,omitempty" xml:"long,omitempty"`
	// City
	City *string `form:"city,omitempty" json:"city,omitempty" xml:"city,omitempty"`
	// State
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// PeriodResponseBody is used to define fields on response body types.
type PeriodResponseBody struct {
	// Period name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Start time
	StartTime *string `form:"startTime,omitempty" json:"startTime,omitempty" xml:"startTime,omitempty"`
	// End time
	EndTime *string `form:"endTime,omitempty" json:"endTime,omitempty" xml:"endTime,omitempty"`
	// Temperature
	Temperature *int `form:"temperature,omitempty" json:"temperature,omitempty" xml:"temperature,omitempty"`
	// Temperature unit
	TemperatureUnit *string `form:"temperatureUnit,omitempty" json:"temperatureUnit,omitempty" xml:"temperatureUnit,omitempty"`
	// Summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
}

// JobResponseBody is used to define fields on response body types.
type JobResponseBody struct {
	// Job key
	Key *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	// Job payload
	Payload []byte `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// WorkerResponseBody is used to define fields on response body types.
type WorkerResponseBody struct {
	// Worker ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Worker poll jobs
	Jobs []*JobResponseBody `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// Creation timestamp
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// NewAddLocationLocationExists builds a Poller service add_location endpoint
// location_exists error.
func NewAddLocationLocationExists(body *AddLocationLocationExistsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewSubscribeForecastOK builds a "Poller" service "subscribe" endpoint result
// from a HTTP "OK" response.
func NewSubscribeForecastOK(body *SubscribeResponseBody) *poller.Forecast {
	v := &poller.Forecast{}
	v.Location = unmarshalLocationResponseBodyToPollerLocation(body.Location)
	v.Periods = make([]*poller.Period, len(body.Periods))
	for i, val := range body.Periods {
		v.Periods[i] = unmarshalPeriodResponseBodyToPollerPeriod(val)
	}

	return v
}

// NewAddWorkerWorkerOK builds a "Poller" service "add_worker" endpoint result
// from a HTTP "OK" response.
func NewAddWorkerWorkerOK(body *AddWorkerResponseBody) *poller.Worker {
	v := &poller.Worker{
		ID:        *body.ID,
		CreatedAt: *body.CreatedAt,
	}
	v.Jobs = make([]*poller.Job, len(body.Jobs))
	for i, val := range body.Jobs {
		v.Jobs[i] = unmarshalJobResponseBodyToPollerJob(val)
	}

	return v
}

// NewRemoveWorkerTooFew builds a Poller service remove_worker endpoint too_few
// error.
func NewRemoveWorkerTooFew(body *RemoveWorkerTooFewResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewStatusPollerStatusOK builds a "Poller" service "status" endpoint result
// from a HTTP "OK" response.
func NewStatusPollerStatusOK(body *StatusResponseBody) *poller.PollerStatus {
	v := &poller.PollerStatus{}
	v.Workers = make([]*poller.Worker, len(body.Workers))
	for i, val := range body.Workers {
		v.Workers[i] = unmarshalWorkerResponseBodyToPollerWorker(val)
	}
	v.Jobs = make([]*poller.Job, len(body.Jobs))
	for i, val := range body.Jobs {
		v.Jobs[i] = unmarshalJobResponseBodyToPollerJob(val)
	}

	return v
}

// ValidateSubscribeResponseBody runs the validations defined on
// SubscribeResponseBody
func ValidateSubscribeResponseBody(body *SubscribeResponseBody) (err error) {
	if body.Location == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("location", "body"))
	}
	if body.Periods == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("periods", "body"))
	}
	if body.Location != nil {
		if err2 := ValidateLocationResponseBody(body.Location); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Periods {
		if e != nil {
			if err2 := ValidatePeriodResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAddWorkerResponseBody runs the validations defined on
// add_worker_response_body
func ValidateAddWorkerResponseBody(body *AddWorkerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Jobs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jobs", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	for _, e := range body.Jobs {
		if e != nil {
			if err2 := ValidateJobResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStatusResponseBody runs the validations defined on StatusResponseBody
func ValidateStatusResponseBody(body *StatusResponseBody) (err error) {
	if body.Workers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("workers", "body"))
	}
	if body.Jobs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jobs", "body"))
	}
	for _, e := range body.Workers {
		if e != nil {
			if err2 := ValidateWorkerResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Jobs {
		if e != nil {
			if err2 := ValidateJobResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAddLocationLocationExistsResponseBody runs the validations defined
// on add_location_location_exists_response_body
func ValidateAddLocationLocationExistsResponseBody(body *AddLocationLocationExistsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRemoveWorkerTooFewResponseBody runs the validations defined on
// remove_worker_too_few_response_body
func ValidateRemoveWorkerTooFewResponseBody(body *RemoveWorkerTooFewResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLocationResponseBody runs the validations defined on
// LocationResponseBody
func ValidateLocationResponseBody(body *LocationResponseBody) (err error) {
	if body.Lat == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lat", "body"))
	}
	if body.Long == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("long", "body"))
	}
	if body.City == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("city", "body"))
	}
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state", "body"))
	}
	return
}

// ValidatePeriodResponseBody runs the validations defined on PeriodResponseBody
func ValidatePeriodResponseBody(body *PeriodResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.StartTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("startTime", "body"))
	}
	if body.EndTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("endTime", "body"))
	}
	if body.Temperature == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temperature", "body"))
	}
	if body.TemperatureUnit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temperatureUnit", "body"))
	}
	if body.Summary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("summary", "body"))
	}
	if body.StartTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.startTime", *body.StartTime, goa.FormatDateTime))
	}
	if body.EndTime != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.endTime", *body.EndTime, goa.FormatDateTime))
	}
	return
}

// ValidateJobResponseBody runs the validations defined on JobResponseBody
func ValidateJobResponseBody(body *JobResponseBody) (err error) {
	if body.Key == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("key", "body"))
	}
	if body.Payload == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payload", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateWorkerResponseBody runs the validations defined on WorkerResponseBody
func ValidateWorkerResponseBody(body *WorkerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Jobs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jobs", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	for _, e := range body.Jobs {
		if e != nil {
			if err2 := ValidateJobResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
