// Code generated by goa v3.16.1, DO NOT EDIT.
//
// Poller HTTP client encoders and decoders
//
// Command:
// $ goa gen goa.design/pulse/examples/weather/services/poller/design -o
// services/poller

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	poller "goa.design/pulse/examples/weather/services/poller/gen/poller"
)

// BuildAddLocationRequest instantiates a HTTP request object with method and
// path set to call the "Poller" service "add_location" endpoint
func (c *Client) BuildAddLocationRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddLocationPollerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Poller", "add_location", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddLocationRequest returns an encoder for requests sent to the Poller
// add_location server.
func EncodeAddLocationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*poller.CityAndState)
		if !ok {
			return goahttp.ErrInvalidType("Poller", "add_location", "*poller.CityAndState", v)
		}
		values := req.URL.Query()
		values.Add("city", p.City)
		values.Add("state", p.State)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAddLocationResponse returns a decoder for responses returned by the
// Poller add_location endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddLocationResponse may return the following errors:
//   - "location_exists" (type *goa.ServiceError): http.StatusConflict
//   - error: internal error
func DecodeAddLocationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			return nil, nil
		case http.StatusConflict:
			var (
				body AddLocationLocationExistsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Poller", "add_location", err)
			}
			err = ValidateAddLocationLocationExistsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Poller", "add_location", err)
			}
			return nil, NewAddLocationLocationExists(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Poller", "add_location", resp.StatusCode, string(body))
		}
	}
}

// BuildSubscribeRequest instantiates a HTTP request object with method and
// path set to call the "Poller" service "subscribe" endpoint
func (c *Client) BuildSubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: SubscribePollerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Poller", "subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeRequest returns an encoder for requests sent to the Poller
// subscribe server.
func EncodeSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*poller.CityAndState)
		if !ok {
			return goahttp.ErrInvalidType("Poller", "subscribe", "*poller.CityAndState", v)
		}
		values := req.URL.Query()
		values.Add("city", p.City)
		values.Add("state", p.State)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeSubscribeResponse returns a decoder for responses returned by the
// Poller subscribe endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SubscribeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Poller", "subscribe", err)
			}
			err = ValidateSubscribeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Poller", "subscribe", err)
			}
			res := NewSubscribeForecastOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Poller", "subscribe", resp.StatusCode, string(body))
		}
	}
}

// BuildAddWorkerRequest instantiates a HTTP request object with method and
// path set to call the "Poller" service "add_worker" endpoint
func (c *Client) BuildAddWorkerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddWorkerPollerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Poller", "add_worker", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddWorkerResponse returns a decoder for responses returned by the
// Poller add_worker endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAddWorkerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddWorkerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Poller", "add_worker", err)
			}
			err = ValidateAddWorkerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Poller", "add_worker", err)
			}
			res := NewAddWorkerWorkerOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Poller", "add_worker", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveWorkerRequest instantiates a HTTP request object with method and
// path set to call the "Poller" service "remove_worker" endpoint
func (c *Client) BuildRemoveWorkerRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveWorkerPollerPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Poller", "remove_worker", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRemoveWorkerResponse returns a decoder for responses returned by the
// Poller remove_worker endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRemoveWorkerResponse may return the following errors:
//   - "too_few" (type *goa.ServiceError): http.StatusExpectationFailed
//   - error: internal error
func DecodeRemoveWorkerResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusExpectationFailed:
			var (
				body RemoveWorkerTooFewResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Poller", "remove_worker", err)
			}
			err = ValidateRemoveWorkerTooFewResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Poller", "remove_worker", err)
			}
			return nil, NewRemoveWorkerTooFew(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Poller", "remove_worker", resp.StatusCode, string(body))
		}
	}
}

// BuildStatusRequest instantiates a HTTP request object with method and path
// set to call the "Poller" service "status" endpoint
func (c *Client) BuildStatusRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StatusPollerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Poller", "status", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStatusResponse returns a decoder for responses returned by the Poller
// status endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Poller", "status", err)
			}
			err = ValidateStatusResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Poller", "status", err)
			}
			res := NewStatusPollerStatusOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Poller", "status", resp.StatusCode, string(body))
		}
	}
}

// unmarshalLocationResponseBodyToPollerLocation builds a value of type
// *poller.Location from a value of type *LocationResponseBody.
func unmarshalLocationResponseBodyToPollerLocation(v *LocationResponseBody) *poller.Location {
	res := &poller.Location{
		Lat:   *v.Lat,
		Long:  *v.Long,
		City:  *v.City,
		State: *v.State,
	}

	return res
}

// unmarshalPeriodResponseBodyToPollerPeriod builds a value of type
// *poller.Period from a value of type *PeriodResponseBody.
func unmarshalPeriodResponseBodyToPollerPeriod(v *PeriodResponseBody) *poller.Period {
	res := &poller.Period{
		Name:            *v.Name,
		StartTime:       *v.StartTime,
		EndTime:         *v.EndTime,
		Temperature:     *v.Temperature,
		TemperatureUnit: *v.TemperatureUnit,
		Summary:         *v.Summary,
	}

	return res
}

// unmarshalJobResponseBodyToPollerJob builds a value of type *poller.Job from
// a value of type *JobResponseBody.
func unmarshalJobResponseBodyToPollerJob(v *JobResponseBody) *poller.Job {
	res := &poller.Job{
		Key:       *v.Key,
		Payload:   v.Payload,
		CreatedAt: *v.CreatedAt,
	}

	return res
}

// unmarshalWorkerResponseBodyToPollerWorker builds a value of type
// *poller.Worker from a value of type *WorkerResponseBody.
func unmarshalWorkerResponseBodyToPollerWorker(v *WorkerResponseBody) *poller.Worker {
	res := &poller.Worker{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
	}
	res.Jobs = make([]*poller.Job, len(v.Jobs))
	for i, val := range v.Jobs {
		res.Jobs[i] = unmarshalJobResponseBodyToPollerJob(val)
	}

	return res
}
