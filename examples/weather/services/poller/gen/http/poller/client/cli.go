// Code generated by goa v3.11.3, DO NOT EDIT.
//
// Poller HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/pulse/examples/weather/services/poller/design -o
// services/poller

package client

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
	poller "goa.design/pulse/examples/weather/services/poller/gen/poller"
)

// BuildAddLocationPayload builds the payload for the Poller add_location
// endpoint from CLI flags.
func BuildAddLocationPayload(pollerAddLocationCity string, pollerAddLocationState string) (*poller.CityAndState, error) {
	var err error
	var city string
	{
		city = pollerAddLocationCity
	}
	var state string
	{
		state = pollerAddLocationState
		if utf8.RuneCountInString(state) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 2, true))
		}
		if utf8.RuneCountInString(state) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 2, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &poller.CityAndState{}
	v.City = city
	v.State = state

	return v, nil
}

// BuildSubscribePayload builds the payload for the Poller subscribe endpoint
// from CLI flags.
func BuildSubscribePayload(pollerSubscribeCity string, pollerSubscribeState string) (*poller.CityAndState, error) {
	var err error
	var city string
	{
		city = pollerSubscribeCity
	}
	var state string
	{
		state = pollerSubscribeState
		if utf8.RuneCountInString(state) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 2, true))
		}
		if utf8.RuneCountInString(state) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 2, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &poller.CityAndState{}
	v.City = city
	v.State = state

	return v, nil
}
